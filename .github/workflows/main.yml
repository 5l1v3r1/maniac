name: Build and release

on:
  push:
    tags:
    - 'v*'

jobs:
  build:
    name: Build for Windows and Linux
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: windows-latest
            file_extension: .exe
            os_shorthand: win64
            make_name: mingw32-make
            cmake_flags: -G "MinGW Makefiles"
          - os: ubuntu-latest
            os_shorthand: linux
            make_name: make

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - name: Install Linux dependencies
      run: sudo apt-get install libxtst-dev libx11-dev
      if: matrix.os == 'ubuntu-latest'

    - name: Build debug executable
      run: |
        cmake . ${{ matrix.cmake_flags }} -DCMAKE_SH="CMAKE_SH-NOTFOUND" -DCMAKE_BUILD_TYPE="Debug"
        ${{ matrix.make_name }}
        mv maniac${{ matrix.file_extension }} maniac-dbg-${{ matrix.os_shorthand }}${{ matrix.file_extension }}

    - name: Build release executable
      run: |
        cmake . ${{ matrix.cmake_flags }} -DCMAKE_SH="CMAKE_SH-NOTFOUND" -DCMAKE_BUILD_TYPE="Release"
        ${{ matrix.make_name }}
        mv maniac${{ matrix.file_extension }} maniac-prd-${{ matrix.os_shorthand }}${{ matrix.file_extension }}

    - name: Create and populate builds folder
      run: |
        mkdir builds
        mv maniac-dbg-${{ matrix.os_shorthand }}${{ matrix.file_extension }} builds
        mv maniac-prd-${{ matrix.os_shorthand }}${{ matrix.file_extension }} builds

    - name: Upload builds folder as artifact
      uses: actions/upload-artifact@v1
      with:
        name: builds
        path: builds

  release:
    name: Create release and upload builds
    runs-on: ubuntu-latest

    needs: build

    steps:
    - name: Download builds artifact
      uses: actions/download-artifact@v1
      with:
        name: builds

    - name: Create release
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: true

    - name: Get the latest version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      shell: bash

    - name: Upload Windows release build
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: builds/maniac-prd-win64.exe
        asset_name: maniac-${{ steps.get_version.outputs.VERSION }}-win64.exe
        asset_content_type: application/octet-stream

    - name: Upload Windows debug build
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: builds/maniac-dbg-win64.exe
        asset_name: maniac-${{ steps.get_version.outputs.VERSION }}-win64-debug.exe
        asset_content_type: application/octet-stream

    - name: Upload Linux release build
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: builds/maniac-prd-linux
        asset_name: maniac-${{ steps.get_version.outputs.VERSION }}-linux
        asset_content_type: application/octet-stream

    - name: Upload Linux debug build
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: builds/maniac-dbg-linux
        asset_name: maniac-${{ steps.get_version.outputs.VERSION }}-linux-debug
        asset_content_type: application/octet-stream
